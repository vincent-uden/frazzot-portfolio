import {createRequire as __$$createRequireN} from 'module';var require=__$$createRequireN(import.meta.url);
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};

// node_modules/tsno/dist/client.js
import { createRequire as __$$createRequire } from "module";
var require2;
var init_client = __esm({
  "node_modules/tsno/dist/client.js"() {
    require2 = __$$createRequire("file:///media/hdd/github/frazzot-portfolio/node_modules/tsno/dist/client.js");
  }
});

// src/db/splitDisplayIndex.ts
init_client();
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import dotenv from "dotenv";

// src/db/schema.ts
init_client();
import {
  pgTable,
  text,
  integer,
  timestamp,
  uniqueIndex,
  uuid
} from "drizzle-orm/pg-core";
var galleryImages = pgTable("GalleryImage", {
  id: uuid("id").defaultRandom().primaryKey(),
  name: text("name").notNull(),
  path: text("path").notNull(),
  w: integer("w").notNull(),
  h: integer("h").notNull(),
  thmb_w: integer("thmb_w").notNull(),
  thmb_h: integer("thmb_h").notNull(),
  createdAt: timestamp("createdAt", { precision: 3, mode: "date" }).defaultNow().notNull(),
  categoryId: uuid("categoryId").references(() => imageCategories.id, {
    onDelete: "cascade",
    onUpdate: "cascade"
  }),
  url: text("url"),
  urlExpires: timestamp("urlExpires", { precision: 3, mode: "date" }).defaultNow().notNull(),
  urlLg: text("urlLg"),
  urlLgExpires: timestamp("urlLgExpires", { precision: 3, mode: "date" }).defaultNow().notNull(),
  displayIndex: integer("displayIndex").default(0).notNull()
});
var adminPasswords = pgTable(
  "AdminPassword",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: text("name").notNull(),
    hash: text("hash").notNull()
  },
  (table) => {
    return {
      name_key: uniqueIndex("AdminPassword_name_key").on(table.name)
    };
  }
);
var imageCategories = pgTable(
  "ImageCategory",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    name: text("name").notNull()
  },
  (table) => {
    return {
      name_key: uniqueIndex("ImageCategory_name_key").on(table.name)
    };
  }
);
var sessionTokens = pgTable(
  "SessionToken",
  {
    id: uuid("id").defaultRandom().primaryKey(),
    token: text("token").notNull(),
    expires: timestamp("expires", { precision: 3, mode: "date" }).defaultNow().notNull()
  },
  (table) => {
    return {
      token_key: uniqueIndex("SessionToken_token_key").on(table.token)
    };
  }
);
var blogLikes = pgTable("BlogLikes", {
  id: uuid("id").defaultRandom().primaryKey(),
  fingerprint: text("fingerprint").notNull(),
  blogPost: text("blogPost").notNull(),
  createdAt: timestamp("createdAt", { precision: 3, mode: "date" }).defaultNow().notNull()
});

// src/db/splitDisplayIndex.ts
import { eq } from "drizzle-orm";
import { exit } from "process";
dotenv.config();
var connectionString = process.env.DATABASE_URL;
var sql = postgres(connectionString, { max: 1 });
var db = drizzle(sql, { logger: true });
var categories = await db.select().from(imageCategories);
if (categories == null) {
  exit(1);
}
categories = categories;
console.log(categories);
async function generateNewDisplayOrder(category) {
  console.log("Updating: ", category.name);
  let out = await db.select().from(galleryImages).where(eq(galleryImages.categoryId, category.id)).orderBy(galleryImages.displayIndex);
  await db.transaction(async (tx) => {
    for (let i = 0; i < out.length; i++) {
      if (out[i] != null) {
        await tx.update(galleryImages).set({ displayIndex: i }).where(eq(galleryImages.id, out[i].id));
      }
    }
  });
  return out;
}
for (const category of categories) {
  await generateNewDisplayOrder(category);
}
//# sourceMappingURL=data:application/json;base64,
